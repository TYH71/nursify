"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Command = void 0;
const deps_node_js_1 = require("./deps.node.js");
const isAdmin = (ctx) => ctx.getAuthor().then((author) => ["administrator", "creator"].includes(author.status));
class Command {
    constructor(name, description) {
        this._scopes = [];
        this._languages = new Map();
        this._composer = new deps_node_js_1.Composer();
        this._languages.set("default", { name, description });
    }
    get scopes() {
        return this._scopes;
    }
    get languages() {
        return this._languages;
    }
    get names() {
        return Array.from(this._languages.values()).map(({ name }) => name);
    }
    get name() {
        return this._languages.get("default").name;
    }
    get description() {
        return this._languages.get("default").description;
    }
    addToScope(scope, ...middleware) {
        (0, deps_node_js_1.match)(scope)
            .with({ type: "default" }, () => this._composer.command(this.names, ...middleware))
            .with({ type: "all_chat_administrators" }, () => this._composer.filter(isAdmin).command(this.names, ...middleware))
            .with({ type: "all_private_chats" }, () => this._composer.chatType("private").command(this.names, ...middleware))
            .with({ type: "all_group_chats" }, () => this._composer.chatType(["group", "supergroup"]).command(this.names, ...middleware))
            .with({ type: deps_node_js_1.P.union("chat", "chat_administrators"), chat_id: deps_node_js_1.P.not(deps_node_js_1.P.nullish).select() }, (chatId) => this._composer.filter((ctx) => { var _a; return ((_a = ctx.chat) === null || _a === void 0 ? void 0 : _a.id) === chatId; }).filter(isAdmin).command(this.names, ...middleware))
            .with({ type: "chat_member", chat_id: deps_node_js_1.P.not(deps_node_js_1.P.nullish).select("chatId"), user_id: deps_node_js_1.P.not(deps_node_js_1.P.nullish).select("userId") }, ({ chatId, userId }) => this._composer.filter((ctx) => { var _a; return ((_a = ctx.chat) === null || _a === void 0 ? void 0 : _a.id) === chatId; })
            .filter((ctx) => { var _a; return ((_a = ctx.from) === null || _a === void 0 ? void 0 : _a.id) === userId; })
            .command(this.names, ...middleware));
        this._scopes.push(scope);
        return this;
    }
    localize(languageCode, name, description) {
        this._languages.set(languageCode, { name, description });
        return this;
    }
    getLocalizedName(languageCode) {
        var _a, _b;
        return (_b = (_a = this._languages.get(languageCode)) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : this.name;
    }
    getLocalizedDescription(languageCode) {
        var _a, _b;
        return (_b = (_a = this._languages.get(languageCode)) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : this.description;
    }
    toObject(languageCode = "default") {
        return {
            command: this.getLocalizedName(languageCode),
            description: this.getLocalizedDescription(languageCode),
        };
    }
    middleware() {
        return this._composer.middleware();
    }
}
exports.Command = Command;
