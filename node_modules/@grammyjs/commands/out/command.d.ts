import { type BotCommand, type BotCommandScope, type BotCommandScopeAllChatAdministrators, type BotCommandScopeAllGroupChats, type BotCommandScopeAllPrivateChats, type ChatTypeMiddleware, type Context, type Middleware, type MiddlewareObj } from "./deps.node.js";
export type MaybeArray<T> = T | T[];
type BotCommandGroupsScope = BotCommandScopeAllGroupChats | BotCommandScopeAllChatAdministrators;
export declare class Command<C extends Context = Context> implements MiddlewareObj<C> {
    private _scopes;
    private _languages;
    private _composer;
    constructor(name: string, description: string);
    get scopes(): BotCommandScope[];
    get languages(): Map<string, {
        name: string;
        description: string;
    }>;
    get names(): string[];
    get name(): string;
    get description(): string;
    addToScope(scope: BotCommandGroupsScope, ...middleware: ChatTypeMiddleware<C, "group" | "supergroup">[]): this;
    addToScope(scope: BotCommandScopeAllPrivateChats, ...middleware: ChatTypeMiddleware<C, "private">[]): this;
    addToScope(scope: BotCommandScope, ...middleware: Array<Middleware<C>>): this;
    localize(languageCode: string, name: string, description: string): this;
    getLocalizedName(languageCode: string): string;
    getLocalizedDescription(languageCode: string): string;
    toObject(languageCode?: string): BotCommand;
    middleware(): import("grammy").MiddlewareFn<C>;
}
export {};
