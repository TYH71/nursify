"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Commands = void 0;
const command_js_1 = require("./command.js");
const deps_node_js_1 = require("./deps.node.js");
class Commands {
    constructor(commands = []) {
        this._languages = new Set();
        this._scopes = new Map();
        this._commands = [];
        this._composer = new deps_node_js_1.Composer();
        commands.forEach((command) => this._commands.push(command));
    }
    _addCommandToScope(scope, command) {
        var _a;
        const commands = (_a = this._scopes.get(JSON.stringify(scope))) !== null && _a !== void 0 ? _a : [];
        this._scopes.set(JSON.stringify(scope), commands.concat([command]));
    }
    _populateComposer() {
        for (const command of this._commands) {
            for (const args of command.languages.values()) {
                this._composer.command(args.name, command.middleware());
            }
        }
    }
    _populateMetadata() {
        this._languages.clear();
        this._scopes.clear();
        this._commands.forEach((command) => {
            for (const scope of command.scopes) {
                this._addCommandToScope(scope, command);
            }
            for (const language of command.languages.keys()) {
                this._languages.add(language);
            }
        });
    }
    command(name, description) {
        const command = new command_js_1.Command(name, description);
        this._commands.push(command);
        return command;
    }
    toArgs() {
        this._populateMetadata();
        const params = [];
        for (const [scope, commands] of this._scopes.entries()) {
            for (const language of this._languages) {
                params.push({
                    scope: JSON.parse(scope),
                    language_code: language === "default" ? undefined : language,
                    commands: commands.map((command) => command.toObject(language)),
                });
            }
        }
        return params.filter((params) => params.commands.length > 0);
    }
    toSingleScopeArgs(scope) {
        this._populateMetadata();
        const params = [];
        for (const language of this._languages) {
            params.push({
                scope,
                language_code: language === "default" ? undefined : language,
                commands: this._commands
                    .filter((command) => command.scopes.length)
                    .map((command) => command.toObject(language)),
            });
        }
        return params;
    }
    async setCommands({ api }) {
        await Promise.all(this.toArgs().map((args) => api.raw.setMyCommands(args)));
    }
    toJSON() {
        return this.toArgs();
    }
    toString() {
        return JSON.stringify(this);
    }
    middleware() {
        this._populateComposer();
        return this._composer.middleware();
    }
    [Symbol.for("Deno.customInspect")]() {
        return this.toString();
    }
    [Symbol.for("nodejs.util.inspect.custom")]() {
        return this.toString();
    }
}
exports.Commands = Commands;
